<project name="T24BuildControl" basedir="/app/t24/deploy">
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>  <taskdef Resource="net/sf/antcontrib/antlib.xml"/>
  <property environment="env"/>    <property name="t24user" value="BUILD1"/>  <property name="t24pwd" value="654321"/>    <property name="stgdev_download" value="t24prd@ftindev"/>
  <tstamp>    <format property="timestamp" pattern="yyyyMMddHHmmss"/>  </tstamp>
    <exec executable="hostname" dir="${basedir}"          outputproperty="hostname"/>    <echo>${hostname}</echo>
  <target name="hkmbjars">    <echo>${env.TAFJ_HOME}</echo> <for list="${tarfiles}" param="tar">      <sequential>        <echo>Backup JARS in: @{tar}</echo>          <exec executable="sh" outputproperty="insideTar">   <arg line='-c "find /app/t24/deploy/hkmbjars -type f -name @{tar} |xargs -n1 tar tf"'/>    </exec>    <echo>InsideTar: ${insideTar}</echo>    <propertyregex property="processedInsideTar"               input="${insideTar}"               regexp="${line.separator}"               replace=","               global="true" />    <condition property="processedInsideTar.set" value="${insideTar}" else="${processedInsideTar}">            <not>              <isset property="processedInsideTar"/>            </not>          </condition>    <echo>processedInsideTar: ${processedInsideTar}</echo>    <echo>processedInsideTar.set: ${processedInsideTar.set}</echo>    <for list="${processedInsideTar.set}" param="jar">      <sequential>     <echo>jar: @{jar}</echo>     <copy preservelastmodified="true" quiet="true" failonerror="false" file="${env.T24_HOME}/hkmbjars/@{jar}" todir="${basedir}/hkmbjarsBAK/"/>   </sequential>       </for>    <tar destfile="${basedir}/hkmbjarsBAK/${timestamp}.replacedBy_@{tar}">   <fileset dir="${basedir}/hkmbjarsBAK/" includes="*.jar"/>    </tar>     <delete>      <fileset dir="${basedir}/hkmbjarsBAK/" includes="*.jar"/>    </delete>      </sequential>    </for>    <for list="${tarfiles}" param="tar">      <sequential>        <echo>untar: @{tar}</echo>        <untar src="${basedir}/hkmbjars/@{tar}" dest="${env.T24_HOME}/hkmbjars"/>      </sequential>    </for> <if>      <equals arg1="${hostname}" arg2="CBSAPPPRD01"/>      <then>        <antcall target="_jars_to_dr_" />      </then> </if>  </target>    <target name="rollbackjars">    <for list="${tarfiles}" param="tar">      <sequential>        <echo>untar: @{tar}</echo>  <path id="hkmbjarsBAK">    <first>   <sort>     <fileset dir="${basedir}/hkmbjarsBAK/" includes="*@{tar}"/>   </sort>    </first>  </path>  <echo>$${hkmbjarsBAK} => ${toString:hkmbjarsBAK}</echo>        <untar src="${toString:hkmbjarsBAK}" dest="${env.T24_HOME}/hkmbjars"/>      </sequential>    </for> <if>      <equals arg1="${hostname}" arg2="CBSAPPSIT01"/>      <then>        <antcall target="_jars_to_dr_" />      </then> </if>  </target>    <target name="_copy_">    <echo>Copying Package ${pack} to ${env.T24_HOME}/F.BCON.DATA/RELEASE</echo>    <untar src="${basedir}/bcon.release/${pack}.tar" dest="${env.T24_HOME}/F.BCON.DATA/RELEASE"/>    <copy quiet="true" failonerror="false" file="${basedir}/bcon.release/${pack}.pre.ofsmsg"  todir="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}"/>    <copy quiet="true" failonerror="false" file="${basedir}/bcon.release/${pack}.post.ofsmsg" todir="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}"/>  </target>
  <target name="_see_" depends="_setup_ofs_">    <record append="yes" name="${basedir}/bcon.release/${pack}-${timestamp}.out" action="start" emacsmode="true"/>    <exec executable="sh">       <arg line='-c "echo \"${ofs_see}\\nexit\\n" | tRun tSS TWS"'/>    </exec>    <record name="${basedir}/bcon.release/${pack}-${timestamp}.out" action="stop"/>    <replaceregexp match="," replace="${line.separator}" flags="g" byline="true">      <fileset dir="${basedir}/bcon.release" includes="**/${pack}-${timestamp}.out"/>    </replaceregexp>  </target>
  <target name="_reverse_" depends="_setup_ofs_">    <record append="yes" name="${basedir}/bcon.release/${pack}-${timestamp}.out" action="start" emacsmode="true"/>    <exec executable="sh">       <arg line='-c "echo \"${ofs_reverse}\\nexit\\n" | tRun tSS TWS"'/>    </exec>    <record name="${basedir}/bcon.release/${pack}-${timestamp}.out" action="stop"/>    <replaceregexp match="," replace="${line.separator}" flags="g" byline="true">      <fileset dir="${basedir}/bcon.release" includes="**/${pack}-${timestamp}.out"/>    </replaceregexp>  </target>
  <target name="release_bcon">    <echo>${bcon}</echo>    <for list="${bcon}" param="pack">      <sequential>      <antcall target="_copy_">        <param name="pack" value="@{pack}" />      </antcall>      <antcall target="_ofs_release_">        <param name="pack" value="@{pack}" />        <param name="stage" value="pre" />      </antcall>      <antcall target="_release_">        <param name="pack" value="@{pack}" />      </antcall>      <antcall target="_ofs_release_">        <param name="pack" value="@{pack}" />        <param name="stage" value="post" />      </antcall>   <antcall target="_check_inau_">        <param name="pack" value="@{pack}" />      </antcall>      </sequential>    </for>    <echo>Promotion of package completed, please refer to output file of timestamp = ${timestamp}</echo>  </target> 
  <target name="_setup_ofs_">    <property name="ofs_reverse" value="BUILD.CONTROL,/R,${t24user}/${t24pwd}/${company},${pack}"/>      <property name="ofs_see" value="BUILD.CONTROL,/S,${t24user}/${t24pwd}/${company},${pack}"/>    <property name="ofs_verify" value="BUILD.CONTROL,/V,${t24user}/${t24pwd}/${company},${pack}"/>  </target>
  <target name="_check_port_">    <echo>Checking whether TAFJEE is running</echo>    <condition property="tafjee.running">      <socket server="localhost" port="9080"/>     </condition>      </target>
  <target name="_release_" depends="_setup_ofs_">    <echo>Release Build Control Package: ${pack} on Server: ${hostname}</echo>    <echo file="${basedir}/bcon.release/${pack}-${timestamp}.out" append="true">      Release Build Control Package: ${pack} on Server: ${hostname}    </echo>    <if>      <available file="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/BCON_${pack}"/>      <then>        <loadfile srcfile="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/BCON_${pack}" property="line">           <filterchain>             <filterreader classname="org.apache.tools.ant.filters.HeadFilter">               <param name="lines" value="19"/>             </filterreader>             <filterreader classname="org.apache.tools.ant.filters.TailFilter">               <param name="lines" value="1"/>             </filterreader>             <striplinebreaks/>             <native2asciifilter/>             <tokenfilter>               <replaceregex pattern="\\u00ef\\u00a3\\u00bd" replace="," flags="g"/>             </tokenfilter>           </filterchain>         </loadfile>         <script language="javascript"><![CDATA[           var n = project.getProperty("line").split(",");           var dl= "";           for(var i = 0; i < n.length; i++) {              dl += ",DL.DEFINE:"+(i+1)+":1="+n[i];           }                 project.setNewProperty("dl.define",dl.substring(1));          ]]>             </script>   
         <property name="ofs_input"><![CDATA[BUILD.CONTROL,/I/PROCESS,${t24user}/${t24pwd}/${company},${pack},DESC:1:1=${pack},MNEMONIC:1:1=${pack},ACTION:1:1=RELEASE,OFS.SOURCE.ID:1:1=BUILD.CONTROL,SAVE.PATH:1:1=../../BNK/F.BCON.DATA/SAVE,RELEASE.PATH:1:1=../../BNK/F.BCON.DATA/RELEASE,DL.RESTORE.PATH:1:1=../../BNK/F.DL.DATA/DL.RESTORE,DL.SAVE.PATH:1:1=../../BNK/F.DL.DATA,CLR.PROCESS.LOG:1:1=Y,CREATE.LIB:1:1=Y,CREATE.BIN:1:1=Y,CREATE.REL.BP:1:1=Y,${dl.define},PROGRAM.OS:1:1=UNIX]]></property>
         <echo>${ofs_reverse}</echo>         <echo>${ofs_input}</echo>         <echo>${ofs_verify}</echo>         <echo>${ofs_see}</echo>   <exec executable="sh">           <arg line='-c "clear"'/>         </exec>         <exec executable="sh">           <arg line='-c "echo \"${ofs_reverse}\\nexit\\n\" | tRun tSS TWS "'/>         </exec>   <exec executable="sh">           <arg line='-c "clear"'/>         </exec>   <exec executable="sh">           <arg line='-c "echo Release BCON, Please wait."'/>         </exec>         <exec executable="sh" output="${basedir}/bcon.release/${pack}-${timestamp}.out" append="true">     <arg line='-c "echo \"${ofs_input}\\n${ofs_verify}\\n${ofs_see}\\nexit\\n\" | tRun tSS TWS "'/>         </exec>         <replaceregexp match="," replace="${line.separator}" flags="g" byline="true">           <fileset dir="${basedir}/bcon.release" includes="**/${pack}-${timestamp}.out"/>         </replaceregexp>         <loadfile srcfile="${basedir}/bcon.release/${pack}-${timestamp}.out" property="result">           <filterchain>             <filterreader classname="org.apache.tools.ant.filters.LineContainsRegExp">               <param type="regexp" value="SUCCESS|FAIL"/>             </filterreader>           </filterchain>         </loadfile>         <resourcecount property="success.count" count="0" when="eq">           <tokens>             <concat>               <filterchain>                 <filterreader classname="org.apache.tools.ant.filters.LineContainsRegExp">                   <param type="regexp" value="SUCCESS"/>                 </filterreader>                 <tokenfilter>                   <stringtokenizer delims="${line.separator}" />                 </tokenfilter>               </filterchain>               <propertyresource name="result" />             </concat>           </tokens>         </resourcecount>         <resourcecount property="fail.count" count="0" when="eq">           <tokens>             <concat>               <filterchain>                 <filterreader classname="org.apache.tools.ant.filters.LineContainsRegExp">                   <param type="regexp" value="FAIL"/>                 </filterreader>                 <tokenfilter>                   <stringtokenizer delims="${line.separator}" />                 </tokenfilter>              </filterchain>              <propertyresource name="result" />            </concat>          </tokens>        </resourcecount>        <echo><![CDATA[Summary:
]]>${result}<![CDATA[
SUCCESS Count = ]]>${success.count}<![CDATA[FAIL Count    = ]]>${fail.count}</echo>      </then>    </if>   </target>    <target name="_check_inau_"> <echo>Checking the result from DL.DEFINE ...</echo> <exec executable="sh">   <arg line='-c "tRun CHECK.BCON.RELEASE ${pack}"'/> </exec> <path id="checkBCON">   <last>  <sort>    <fileset dir="/app/t24/r16/BNK/UD/&amp;SAVEDLISTS&amp;/" includes="BCRESULT.*"/>  </sort>   </last> </path> <echo>$${checkBCON} => ${toString:checkBCON}</echo> <loadfile srcfile="${toString:checkBCON}" property="dldefine">    <filterchain>   <filterreader classname="org.apache.tools.ant.filters.LineContainsRegExp">     <param type="regexp" value="RECORD NOT YET AUTHORISED"/>   </filterreader>    </filterchain>  </loadfile>  <fail message="${dldefine}">    <condition>   <isset property="dldefine"/>    </condition>  </fail>  <echo>BCON releases Successfully.</echo>  </target>    <target name="_jars_to_dr_">    <echo>Backup hkmbjars to /data</echo> <exec executable="sh">      <arg line='-c "tar cf /data/hkmbjars.tar ${env.T24_HOME}/hkmbjars"'/>    </exec>  </target>
  <target name="_restrore_dr_">    <echo>Backup hkmbjars from /data</echo> <if>      <equals arg1="${hostname}" arg2="CBSAPPDR01"/>      <then>        <untar src="/data/hkmbjars.tar" dest="${env.T24_HOME}/"/>      </then>   <else>     <fail message="This function is only for DR environment"/>   </else> </if>  </target>    <target name="_ofs_release_">    <if>        <available file="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg"/>        <then>          <echo>Submitting ofs: ${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg</echo>          <echo file="${basedir}/bcon.release/${pack}-ofs-${timestamp}.out" append="true">            Submitting ofs: ${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg on Server: ${hostname}                </echo>   <copy file="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg" tofile="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg.2" overwrite="yes" />   <echo file="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg.2" append="true">exit</echo>   <echo file="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg.2" append="true"></echo>   <replaceregexp file="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg.2" match="\$\{t24user\}" replace="${t24user}" flags="g" byline="true"></replaceregexp>   <replaceregexp file="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg.2" match="\$\{t24pwd\}" replace="${t24pwd}" flags="g" byline="true"></replaceregexp>          <loadfile srcfile="${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg" property="ofs_lines">            <filterchain>              <expandproperties>                <propertyset>                  <propertyref name="t24user" />                  <propertyref name="t24pwd" />                </propertyset>              </expandproperties>            </filterchain>          </loadfile>          <echo>${ofs_lines}</echo>          <exec executable="sh" output="${basedir}/bcon.release/${pack}-ofs-${timestamp}.out" append="true">   <arg line='-c "cat ${env.T24_HOME}/F.BCON.DATA/RELEASE/${pack}/${pack}.${stage}.ofsmsg.2 | tRun tSS TWS"'/>          </exec>          <replaceregexp match="," replace="${line.separator}" flags="g" byline="true">            <fileset dir="${basedir}/bcon.release" includes="**/${pack}-ofs-${timestamp}.out"/>          </replaceregexp>          <echo>Post release OFS ended, please see output file at ${basedir}/bcon.release/${pack}-ofs-${timestamp}.out</echo>        </then>    </if>  </target>    <target name="_scp_download_file_">    <scp file="${stgdev_download}:${src_dir}/${src_file}.MD5" todir="${todir}" keyfile="${basedir}/download_id_rsa"/>    <scp file="${stgdev_download}:${src_dir}/${src_file}" todir="${todir}" keyfile="${basedir}/download_id_rsa" />    <loadfile property="md5_checksum" srcFile="${todir}/${src_file}.MD5">      <filterchain>        <striplinebreaks/>      </filterchain>    </loadfile>    <if>      <equals arg1="${md5}" arg2="${md5_checksum}" />      <then>        <echo message="The inputted checksum match with the MD5 file downloaded" />      </then>      <else>        <delete file="${todir}/${src_file}" />        <fail message="Error! The inputted checksum ${md5} does NOT match with the MD5 file downloaded" />      </else>    </if>    <checksum file="${todir}/${src_file}" verifyProperty="isMD5ok"/>    <if>      <equals arg1="${isMD5ok}" arg2="true" />      <then>         <echo message="Checksum of the download file ${src_file} match with the MD5 file downloaded" />      </then>      <else>        <delete file="${todir}/${src_file}" />        <fail message="Error! Checksum of the download file ${src_file} does NOT match with the MD5 file downloaded" />      </else>    </if>  </target>    <target name="_main_"> <scriptdef name="propertyreset" language="javascript"  description="Allows to assign @{property} new value">  <attribute name="name"/>  <attribute name="value"/>   project.setProperty(attributes.get("name"), attributes.get("value")); </scriptdef> <loadfile srcfile="${basedir}/joblist/${scrfilename}" property="joblist" /> <property name="countv" value=""/> <property name="splitProperty" value=""/> <script language="javascript"><![CDATA[        var n = project.getProperty("joblist").split(";");  project.setProperty("countv",n.length);       ]]>        </script> <echo>count: ${countv}</echo> <for list="${joblist}" param="splited" trim="true" delimiter=";">   <sequential>     <propertyreset name="splitProperty" value="@{splited}"/>     <script language="javascript"><![CDATA[          var n = project.getProperty("splitProperty").split(",");          project.setProperty("jobType",n[0]);     project.setProperty("tarfiles",n[1]);     project.setProperty("bcon",n[1]);     project.setProperty("md5",n[2]);     project.setProperty("company",n[3]);        ]]>            </script>  <if>    <or>      <equals arg1="${jobType}" arg2="jar"/>    <equals arg1="${jobType}" arg2="JAR"/>   <equals arg1="${jobType}" arg2="Jar"/>    </or>          <then>      <echo>*********************************************************************************************</echo>      <echo>jobType: ${jobType}</echo>   <echo>tarfiles: ${tarfiles}</echo>   <echo>md5: ${md5}</echo>   <antcall target="_scp_download_file_">     <param name="todir" value="${basedir}/hkmbjars" />     <param name="src_file" value="${tarfiles}" />     <param name="src_dir" value="/stgdev/t24prd/t24dev/deploy/hkmbjars" />   </antcall>            <antcall target="hkmbjars" />   <if>     <equals arg1="${hostname}" arg2="CBSAPPUAT1A01"/>      <then>    <scp todir="${login1}:${pw1}@10.252.241.134:/app/t24/r16/BNK/hkmbjars/"    trust="true">      <fileset dir="/app/t24/r16/BNK/hkmbjars/"/>    </scp>    <sshexec host="10.252.241.134"    username="${login1}"    password="${pw1}"    trust="true"    command="chmod 660 /app/t24/r16/BNK/hkmbjars/*"/>     </then>   </if>   <if>     <equals arg1="${hostname}" arg2="CBSAPPPRD01"/>      <then>    <scp todir="${login1}:${pw1}@10.252.241.155:/app/t24/r16/BNK/hkmbjars/"    trust="true">      <fileset dir="/app/t24/r16/BNK/hkmbjars/"/>    </scp>    <sshexec host="10.252.241.155"    username="${login1}"    password="${pw1}"    trust="true"    command="chmod 660 /app/t24/r16/BNK/hkmbjars/*"/>    <scp todir="${login1}:${pw1}@10.252.241.158:/app/t24/r16/BNK/hkmbjars/"    trust="true">      <fileset dir="/app/t24/r16/BNK/hkmbjars/"/>    </scp>    <sshexec host="10.252.241.158"    username="${login2}"    password="${pw2}"    trust="true"    command="chmod 660 /app/t24/r16/BNK/hkmbjars/*"/>     </then>   </if>          </then>  </if>  <if>    <or>      <equals arg1="${jobType}" arg2="bcon"/>    <equals arg1="${jobType}" arg2="BCON"/>   <equals arg1="${jobType}" arg2="Bcon"/>    </or>          <then>      <echo>*********************************************************************************************</echo>   <echo>jobType: ${jobType}</echo>   <echo>bcon: ${bcon}</echo>   <echo>md5: ${md5}</echo>   <echo>company: ${company}</echo>   <antcall target="_scp_download_file_">              <param name="todir" value="${basedir}/bcon.release" />              <param name="src_file" value="${bcon}.tar" />              <param name="src_dir" value="/stgdev/t24prd/t24dev/deploy/bcon.release" />           </antcall>            <antcall target="release_bcon" />          </then>  </if>   </sequential> </for>  </target>
</project>
